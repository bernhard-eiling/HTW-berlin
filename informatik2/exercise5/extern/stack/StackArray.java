package stack;
/**
 * A stack implementation, based on the reading materials from Prof. Dr. Debora Weber-Wulff
 * extended to the needs of our implementation - implemented as a array-stack
 * 
 * http://www.f4.fhtw-berlin.de/~weberwu/info2/Handouts/StackImpl.java
 * @author Tobias Preuss (s0516424) & Niels Richter (s0517512)
 */
public class StackArray implements Stack {
	private int size;
	private Object[] stackArr;
	private int index;
	
	/**
	 * stack builder, needs the size of the stack what should be accessable
	 * the stack is implemented as an array of objects
	 * 
	 * @param s Integer value of the size of the stack
	 */
	public StackArray(int s) {
		size = s;
		stackArr = new Object [size];
		index = -1;
	}
	
	/**
	 * Writes the given object into the stack
	 * 
	 * @param x An object to push into the stack 
	 */
	public void push (Object x) throws StackOverflow {
		if(index+1 < size) {
			stackArr [++index] = x;
		} else throw new StackOverflow ("Stack overflow");
	}
	
	/**
	 * Pops out the youngest element out of the stack
	 * if the stack is empty a StackUnderflow is thrown
	 * 
	 * @throws StackUnderflow
	 */
	public void pop () throws StackUnderflow {
		if (index >=0) {
			--index;
		} else throw new StackUnderflow ("Stack underflow");
	}
	
	/**
	 * Return the youngest element out of the stack and delete it from the stack
	 * 
	 * @return The youngest element at the stack
	 * @throws StackUnderflow If the stack is empty the StackUnderflow will be thrown
	 */
	public Object top () throws StackUnderflow  {
		if (index >= 0) {
			Object output = stackArr[index];
			pop();
			return output;
		} else throw new StackUnderflow ("Stack underflow");
	}
	
	/**
	 * Checks if the stack is empty
	 *  
	 * @return If the stack is empty, than true will be returned else false
	 */
	public boolean isEmpty () {
		return (index < 0);
	}
	
	/**
	 * Empty the whole stack at once, returns nothing
	 */
	public void Empty () {
		index = -1;
	}
	
	/**
	 * Generates an string of the elements of the stack
	 * 
	 * @return s The string, generated in form T : ... : B with T = top, B = bottom
	 */
	public String toString () {
		String s = "Top-> ";
		for (int i = index; i> -1; i--){
			s = s + stackArr[i] + ":";
		}
		s = s + " <-Bottom";
		return s;
	}
	
	/**
	 * Returns the stack as string representation
	 * 
	 * @return the stack as string representation, generated by toString()
	 */
	public String print() {
		return toString();
	}
}
